/****************************************what is RESTful APIs ******************************************/
// A RESTful API is not a package or library but rather an architectural style for designing networked applications. REST stands for Representational State Transfer, and a RESTful API follows the principles of REST. It is used to enable communication between a client and a server over the HTTP protocol.
// A RESTful API is a theory and design pattern for building APIs. Frameworks like Express.js provide tools to implement this pattern efficiently. By following REST principles, you can create clean, scalable, and user-friendly APIs.

// Key Characteristics of a RESTful API:
// Resource-Based:

// Everything in a RESTful API is treated as a resource (e.g., users, products, orders).
// Each resource is identified by a unique URI (e.g., /api/users/1).
// Stateless:

// Each request from a client to a server must contain all the information needed to understand the request.
// The server does not store any session data about the client.
// HTTP Methods:

// CRUD operations are mapped to HTTP methods:
// GET: Retrieve a resource.
// POST: Create a new resource.
// PUT: Update an existing resource.
// DELETE: Delete a resource.
// Representation:

// Resources can be represented in different formats (commonly JSON or XML).
// Uniform Interface:

// Standardized endpoints and responses make it easier for clients to consume APIs.
// Stateless Communication:

// Each request is independent of previous requests.
// Functions of a RESTful API:
// Data Access:

// Retrieve data from the server (e.g., user details, product information).
// Example: GET /api/products/123 → Fetch product with ID 123.
// Data Modification:

// Create, update, or delete resources.
// Example:
// POST /api/users → Create a new user.
// PUT /api/products/123 → Update product 123.
// Integration:

// Allow different applications (e.g., frontend and backend, or third-party services) to communicate and share data.
// Scalability:

// Statelessness and resource-based structure make RESTful APIs easy to scale.
// How to Use a RESTful API:
// As a Developer:

// You can design and implement RESTful APIs using frameworks like Express.js (Node.js), Django REST Framework (Python), Spring Boot (Java), etc.
// As a Consumer:

// Make HTTP requests to interact with an API using tools like Postman, curl, or fetch in JavaScript.






/********************** naming convention for RESTful APIs ***********************/
// 1. Why Naming Matters
// Clear and meaningful route names make your application easier to understand and maintain.
// Routes act as the interface between the frontend and backend, so their names should communicate their purpose.
// 2. Best Practices for Naming Routes
// Here are some commonly followed conventions:

// a) Use RESTful Route Naming
// When building applications, especially APIs, follow RESTful conventions. REST (Representational State Transfer) suggests using specific HTTP methods (GET, POST, PUT, DELETE) for different actions, with route paths reflecting the resources being acted upon.

// HTTP Method	Example Route	Purpose
// GET	/listings	Fetch all listings
// POST	/listings	Create a new listing
// GET	/listings/:id	Fetch a single listing
// PUT	/listings/:id	Update an existing listing
// DELETE	/listings/:id	Delete a specific listing
// b) Use Plural for Resource Names
// Routes typically represent resources (e.g., listings, users, products), and using plurals is the convention:

// /listings → Refers to a collection of listings.
// /users → Refers to a collection of users.
// c) Be Consistent
// Stick to a consistent pattern across your application. For example:

// If you're using /listings/:id for specific listings, don't switch to /listingDetail/:id elsewhere.
// d) Hierarchical and Meaningful Names
// For nested resources or hierarchical relationships, use paths that reflect the structure:

// /users/:userId/listings → Listings belonging to a specific user.
// /categories/:categoryId/products → Products under a specific category.
// e) Avoid Verb-Based Routes
// The HTTP method already conveys the action (e.g., GET, POST), so you don't need to add verbs like get, create, or delete to route names.

// ✅ Use /listings for fetching or creating listings.
// ❌ Avoid /getListings or /createListing.
// 3. Custom Naming
// While RESTful conventions are common, you can create custom routes for specific needs. For example:

// /search → If your app allows searching, this might be used with a query string like /search?query=apartment.
// /login or /logout → For authentication-related routes.
// 4. Rules for Route Naming
// Although there are no hard rules, here are some considerations:

// a) Valid Characters
// Use only alphanumeric characters, hyphens (-), and underscores (_) in route names.
// ✅ /user-profile
// ✅ /user_profile
// ❌ /user@profile (Invalid)
// b) Avoid Duplicates
// Ensure each route is unique, especially when paired with its HTTP method.

// c) Avoid Overly Long Routes
// Keep routes concise and meaningful. For example:

// ✅ /products
// ❌ /this-is-the-route-for-all-products
// d) SEO Considerations (for public websites)
// For routes that will be accessed in a browser, consider SEO-friendly names:

// ✅ /product-details/laptop
// ❌ /details?id=123 (not user-friendly or SEO-optimized)
// 5. Real-Life Examples
// Let’s see how popular websites structure their routes:

// Amazon:
// /products → List all products.
// /products/:id → View details of a specific product.
// /cart → View the shopping cart.
// GitHub:
// /users/:username → View a user's profile.
// /repos/:repoId → View a specific repository.
// /issues/:issueId → View an issue for a repository.
// 6. Custom vs. RESTful Routes
// In some cases, you might combine RESTful conventions with custom routes:

// /listings (RESTful for CRUD operations on listings)
// /listings/search (Custom for searching listings)
// /listings/top (Custom for top-rated listings)

